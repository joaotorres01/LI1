-- | Este módulo define funções comuns da Tarefa 2 do trabalho prático.
module Tarefa2_2019li1g093 where

import LI11920
import Tarefa1_2019li1g093
import Tarefa0_2019li1g093
import Constroi

-- * Testes

-- | Testes unitários da Tarefa 2.
--
-- Cada teste é um triplo (/identificador do 'Jogador'/,/'Jogada' a efetuar/,/'Estado' anterior/).
testesT2 :: [(Int,Jogada,Estado)]
testesT2 = [(0, Acelera, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Ar 1 0 0), Jogador 1 1 1 1 (Ar 1 0 0)]),(0, Acelera, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]),(0, Acelera, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Morto 1.0), Jogador 1 1 1 1 (Chao False)]),(0, Desacelera, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Ar 1 0 0), Jogador 1 1 1 1 (Ar 1 0 0)]),(0, Desacelera, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao False), Jogador 1 1 1 1 (Chao False)]),(0, Desacelera, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Morto 1.0), Jogador 1 1 1 1 (Chao False)]),(0, Dispara, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Ar 1 0 0), Jogador 1 1 1 1 (Ar 1 0 0)]),(0, Dispara, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao False), Jogador 1 1 1 1 (Chao False)]),(0, Dispara, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 0 (Chao True), Jogador 1 1 1 1 (Chao False)]),(0, Dispara, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 0 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]),(0, Dispara, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Morto 1.0), Jogador 1 1 1 1 (Chao False)]),(0, Movimenta D, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Ar 1 0 0), Jogador 1 1 1 1 (Ar 1 0 0)]),(0, Movimenta D, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]),(0, Movimenta D, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Ar 1 (-75) 0), Jogador 1 1 1 1 (Ar 1 (-75) 0)]),(0, Movimenta D, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Morto 1.0), Jogador 1 1 1 1 (Ar 1 0 0)]),(0, Movimenta E, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Ar 1 0 0), Jogador 1 1 1 1 (Ar 1 0 0)]),(0, Movimenta E, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]),(0, Movimenta E, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Ar 1 75 0), Jogador 1 1 1 1 (Ar 1 75 0)]),(0, Movimenta E, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Morto 1.0), Jogador 1 1 1 1 (Ar 1 0 0)]),(0, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]),(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1 1 1 (Chao True)]),(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 5, Rampa Relva 5 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 0 1 1 (Chao True), Jogador 1 1.5 1 1 (Chao True)]),(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1 1 1 (Morto 1.0)]),(1, Movimenta C, Estado [[Recta Terra 0, Recta Terra 0, Recta Terra 0],[Recta Terra 0,  Rampa Relva 0 5, Rampa Relva 5 0]] [Jogador 0 1 1 1 (Chao True), Jogador 1 1.5 1 1 (Chao True)]),(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 1, Rampa Relva 1 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.1 1 1 (Chao True), Jogador 1 1.1 1 1 (Chao True)]),(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1.5 1 1 (Ar 1 0 0)]),(1, Movimenta C, Estado [[Recta Terra 0, Recta Terra 0, Recta Terra 0],[Recta Terra 0,  Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1.5 1 1 (Ar 1 0 0)]),(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 1, Rampa Relva 1 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.1 1 1 (Chao True), Jogador 1 1.1 1 1 (Ar 1 0 0)]),(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 1, Rampa Relva 1 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.1 1 1 (Chao True), Jogador 1 1.1 1 1 (Ar 1 0 0)]),(1, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1 1 1 (Chao True)]),(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1 1 1 (Chao True)]),(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Morto 1.0), Jogador 1 1 1 1 (Chao True)]),(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1.5 1 1 (Chao True)]),(0, Movimenta B, Estado [[Recta Terra 0, Recta Terra 0, Recta Terra 0],[Recta Terra 0,  Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1.5 1 1 (Chao True)]),(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 1, Rampa Relva 1 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.1 1 1 (Chao True), Jogador 1 1.1 1 1 (Chao True)]),(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.5 1 1 (Ar 1 0 0), Jogador 1 1.5 1 1 (Ar 1 0 0)]),(0, Movimenta B, Estado [[Recta Terra 0, Recta Terra 0, Recta Terra 0],[Recta Terra 0,  Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Ar 1 0 0), Jogador 1 1.5 1 1 (Ar 1 0 0)]),(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 1, Rampa Relva 1 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.1 1 1 (Ar 1 0 0), Jogador 1 1.1 1 1 (Ar 1 0 0)]),(0, Dispara, (Estado [[Recta Terra 0, Rampa Terra 0 2, Rampa Terra 2 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [(Jogador 0 2 1 1 (Chao True)),(Jogador 1 1 1 1 (Chao True))])),(0, Dispara, (Estado [[Recta Terra 0, Rampa Terra 0 2, Rampa Terra 2 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [(Jogador 0 2 1 0 (Chao True)),(Jogador 1 1 1 1 (Chao True))])),(1, Dispara, (Estado [[Recta Terra 0, Rampa Terra 0 2, Rampa Terra 2 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [(Jogador 0 2 1 0 (Chao True)),(Jogador 1 2 1 0 (Chao True))]))]
 --testa se o jogador consegue acelerar enquanto está no Ar]
 --testa se o jogador consegue acelerar enquanto está no Ar
 --testa se o jogador consegue acelerar enquanto está no Chao
 --testa se o jogador consegue acelerar enquanto está Morto
 --testa se o jogador consegue desacelerar enquanto está no Ar
 --testa se o jogador consegue desacelerar enquanto está no Chao
 --testa se o jogador consegue desacelerar enquanto está Morto
 -- testa se o jogador consegue disparar enquanto está no Ar
-- testa se o jogador consegue disparar enquanto está no Chao
 --testa se o jogador consegue disparar enquanto está no Chao, sem colas
 -- testa se o jogador consegue dispara enquanto está no Chao, na 1ª peça
-- testa se o jogador consegue disparar enquanto está Morto
 --testa se o jogador consegue inclinar a mota para a direita, enquanto está no ar
 --testa se o jogador consegue inclinar a mota para a direita, enquanto está no Chao, numa Reta
 --testa se o jogador consegue inclinar a mota para a direita, enquanto está no ar e com -75 graus de inclinação
 --testa se o jogador consegue inclinar a mota para a direita, enquanto está Morto
 --testa se o jogador consegue inclinar a mota para a esquerda, enquanto está no ar
 --testa se o jogador consegue inclinar a mota para a esquerda, enquanto está no Chao
 --testa se o jogador consegue inclinar a mota para a esquerda, enquanto está no ar e com +75 graus de inclinação
 --testa se o jogador consegue inclinar a mota para a esquerda, enquanto está Morto
 --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao na pista de cima
 --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao noutra pista qualquer
 --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao e encontra uma diferença de alturas >0.2
 --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta Morto
 --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao e encontra uma diferença de alturas <-0.2
 --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao e encontra uma |diferença de alturas| = 0.2
 --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no ar e encontra uma diferença de alturas >0.2
 --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no ar e encontra uma diferença de alturas <-0.2
 --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no ar e encontra uma |diferença de alturas| = 0.2
 --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no chao na pista de baixo
 --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no chao noutra pista qualquer
 --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta Morto
 --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no chao e encontra uma diferença de alturas <0.2
 --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no chao e encontra uma diferença de alturas >-0.2
 --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no chao e encontra uma |diferença de alturas| = 0.2
 --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no ar e encontra uma diferença de alturas <0.2
--testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no ar e encontra uma diferença de alturas >-0.2
 --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no ar e encontra uma |diferença de alturas| = 0.2
---- testa se o jogador consegue disparar enquanto está no Chao, numa Rampa
-- * Funções principais da Tarefa 2.

-- | Efetua uma jogada.
jogada :: Int -- ^ O identificador do 'Jogador' que efetua a jogada.
       -> Jogada -- ^ A 'Jogada' a efetuar.
       -> Estado -- ^ O 'Estado' anterior.
       -> Estado -- ^ O 'Estado' resultante após o jogador efetuar a jogada.
jogada indice (Movimenta dir) (Estado mapa je)  | dir == B = moveBaixo patual pant (Estado mapa je) indice
                                                | dir == C = moveCima patual pseg (Estado mapa je) indice
                                                | dir == D = moveDir (Estado mapa je) indice
                                                | dir == E = moveEsq (Estado mapa je) indice
                                                where
                                    (Jogador a b c d e) = encontraIndiceLista indice je
                                    patual = encontraPosicaoMatriz (a,dist) mapa
                                    pseg = encontraPosicaoMatriz ((a-1),dist) mapa
                                    pant = encontraPosicaoMatriz ((a-1),dist) mapa
                                    dist = floor b

jogada indice (Acelera) (Estado mapa je) = (Estado mapa (atualizaIndiceLista indice (acelerar (encontraIndiceLista indice je)) je))
jogada indice (Desacelera) (Estado mapa je) = (Estado mapa (atualizaIndiceLista indice (desacelararrr (encontraIndiceLista indice je)) je))
jogada indice (Dispara) (Estado mapa je) = dispararcola (atualizaIndiceLista indice (encontraIndiceLista indice je) je) indice mapa 


--1)

inclinacaoPecaAnterior:: Peca -> Double -- funcao que calcula a inclinacao de uma peca
inclinacaoPecaAnterior (Rampa _ x y) = rad2graus (atan (fromIntegral (y-x)))


moveCima :: Peca -> Peca -> Estado -> Int -> Estado  
moveCima patual pseg (Estado mapa l) n = 
    if ifchao e && difAlt player patual pseg <=0.2 && difAlt player patual pseg >=(-0.2) then (Estado mapa (atualizaIndiceLista n (sobepista player) l)) else 
       if ifchao e && difAlt player patual pseg >0.2 then Estado mapa (atualizaIndiceLista n morto l) else
       if ifchao e && ifchao e && difAlt player patual pseg <(-0.2) then (Estado mapa (atualizaIndiceLista n ar l)) else Estado mapa l
                where morto = (Jogador a b 0 d (Morto 1.0))
                      player = (Jogador a b c d e)
                      ar = (Jogador (a-1) b c d (Ar (altPeca b patual) (inclinacaoPecaAnterior patual) 0))
                      (Jogador a b c d e) = encontraIndiceLista n l
                      

moveBaixo:: Peca -> Peca -> Estado -> Int -> Estado -- funcao que verifica se o jogador pode passar para a pista abaixo 
moveBaixo patual pseg (Estado mapa l) n = 
    if ifchao e && difAlt player patual pseg <=0.2 && difAlt player patual pseg >=(-0.2) then (Estado mapa (atualizaIndiceLista n (descepista player mapa) l)) else
       if ifchao e && difAlt player patual pseg >0.2 then Estado mapa (atualizaIndiceLista n morto l) else
       if ifchao e && difAlt player patual pseg <(-0.2) then  (Estado mapa (atualizaIndiceLista n descer l)) else Estado mapa l
            where 
                (Jogador a b c d e) = encontraIndiceLista n l
                morto = (Jogador a b 0 d (Morto 1.0))
                player = (Jogador a b c d e)
                ar = (Jogador a b c d (Ar (altPeca b patual) (inclinacaoPecaAnterior patual) 0))
                descer = (descepista ar mapa)


sobepista:: Jogador -> Jogador -- dada a pista altual do jogador verifica se é possível passar para a pista acima 
sobepista (Jogador a b c d e)  = if a==0 then (Jogador a b c d e) else (Jogador (a-1) b c d e)

descepista:: Jogador -> Mapa-> Jogador --dada a pista altual do jogador verifica se é possível passar para a pista anterior
descepista (Jogador a b c d e) h = if ((length h)-1)==a then (Jogador a b c d e) else (Jogador (a+1) b c d e)

--Altura
altPeca:: Double -> Peca -> Double -- dada uma peca e um double (diferença entre a distancia que o jogador percorreu e esse mesmo valor arrendondado as unidades) a funçao determina a altura num determinado ponto da peca
altPeca b (Recta _ h) = fromIntegral h
altPeca b (Rampa _ x y) =(((fromIntegral(y-x))*num)+fromIntegral(x))
                               where 
                                num = fazNum b

difAlt :: Jogador -> Peca -> Peca -> Double -- função que verifica a diferença entre a altura da peça para a qual o jogador pretende ir e a altura da peça em que ele se encontra
difAlt (Jogador a b c d e) pi pf = ((altPeca b pf)-(altPeca b pi)) 

                   
ifchao :: EstadoJogador -> Bool --funcao que verifica se o jogador se encontra no chao ou não 
ifchao (Chao _) = True 
ifchao _ = False 

ifAr:: EstadoJogador -> Bool -- Funcao que verifica se o jogador se encontra no ar ou nao
ifAr (Ar _ _ _) = True
ifAr _ = False

inclinacaoPlayer :: EstadoJogador -> Double
inclinacaoPlayer (Ar a b c) = b 

fazNum :: Double -> Double
fazNum b = b - fromIntegral(floor b)

--acaba altura

moveDir:: Estado -> Int -> Estado
moveDir (Estado mapa l) n = 
                         if (ifAr e)==True && inclinacaoPlayer e >=(-75) then Estado mapa (atualizaIndiceLista n ar l) else (Estado mapa l)
                            where 
                                ar = (Jogador a b c d estado)
                                (Jogador a b c d e) = encontraIndiceLista n l
                                estado = estadoAr e

estadoAr :: EstadoJogador -> EstadoJogador
estadoAr (Ar p o i) = (Ar p (o-15) i)
   

moveEsq :: Estado -> Int -> Estado
moveEsq (Estado mapa l) n = if (ifAr e)==True && inclinacaoPlayer e <=75 then Estado mapa (atualizaIndiceLista n ar l) else (Estado mapa l)
                            where
                                ar = (Jogador a b c d estado)
                                (Jogador a b c d e) = encontraIndiceLista n l
                                estado = estadoAr1 e

estadoAr1 :: EstadoJogador -> EstadoJogador
estadoAr1 (Ar p o i) = (Ar p (o + 15) i)


acelerar :: Jogador -> Jogador
acelerar (Jogador a b c d e) = if (ifchao e)==True then (Jogador a b c d (Chao True)) else (Jogador a b c d e)

desacelararrr :: Jogador -> Jogador
desacelararrr (Jogador a b c d e) = if (ifchao e)==True then (Jogador a b c d (Chao False)) else (Jogador a b c d e)

dispararcola :: [Jogador] -> Int -> Mapa -> Estado
dispararcola ej n m = if ifmunicao cola && ifchao estado && ifVivo estado && ifpecaVal distancia 
                        then Estado mapaAtualizado estadoAtual else Estado m ej
                    where
                        jc = jcola (Jogador pistaAtual distancia vel cola estado)
                        mapaAtualizado = atualizaPosicaoMatriz (pistaAtual, (distInteira-1)) pecaCola m
                        pecaCola = meteCola cola distancia peca
                        distInteira = fromIntegral(floor distancia)
                        peca = encontraIndiceLista (distInteira-1) (encontraIndiceLista n m)
                        estadoAtual = atualizaIndiceLista n jc ej
                        (Jogador pistaAtual distancia vel cola estado) = encontraIndiceLista n ej



meteCola :: Int -> Double-> Peca -> Peca
meteCola d b (Recta p h) = if ifmunicao d && ifpecaVal b  then (Recta Cola h) else (Recta p h)
meteCola d b (Rampa p h1 hf) = if ifmunicao d  && ifpecaVal b then (Rampa Cola h1 hf) else (Rampa p h1 hf)  

jcola :: Jogador -> Jogador
jcola (Jogador a b c d e) = (Jogador a b c (d-1) e)

ifVivo :: EstadoJogador -> Bool 
ifVivo (Chao _) = True

ifmunicao:: Int-> Bool 
ifmunicao d = if d>=1 then True else False

ifpecaVal:: Double -> Bool
ifpecaVal b = if b>=1 then True else False