-- | Este módulo define funções comuns da Tarefa 6 do trabalho prático.
module Tarefa6_2019li1g093 where

import LI11920
import Tarefa4_2019li1g093
import Tarefa2_2019li1g093
import Tarefa0_2019li1g093

-- * Funções principais da Tarefa 6.

-- | Define um ro'bot' capaz de jogar autonomamente o jogo.
bot :: Int          -- ^ O identificador do 'Jogador' associado ao ro'bot'.
    -> Estado       -- ^ O 'Estado' para o qual o ro'bot' deve tomar uma decisão.
    -> Maybe Jogada -- ^ Uma possível 'Jogada' a efetuar pelo ro'bot'.
bot indice e = Just (jogar indice e)

jogar :: Int -> Estado -> Jogada
jogar indice (Estado m lj) = if ifAr e == True then 
								if (intersetam (pontoInicial, pontoFinal) (reta patual d)) == True then inclinar e patual else inclinar e pfrente else
							if ifchao e == True then movimentar jog m pfrente pesq pdir else Acelera
								where
									jog@(Jogador p d v c e) = encontraIndiceLista indice lj
									pfrente = encontraPosicaoMatriz (p,(dist+1)) m 
									patual = encontraPosicaoMatriz (p,dist) m
									pesq = encontraPosicaoMatriz (p-1, dist+1) m
									pdir = encontraPosicaoMatriz (p+1, dist+1) m
									dist = floor d
									pontoInicial@(Cartesiano x2 y2) = (Cartesiano d a)
									pontoFinal@(Cartesiano x3 y3) = somaVetores pontoInicial vetorFinal
									vetorFinal@(Cartesiano x y) = polar2cart (multiplicaVetor 0.2 (somaVetores vetorVel vetorg))
									vetorVel = Polar v i
									vetorg = Polar g (-90)
									(Ar a i g) = calcEstado e


calcEstado :: EstadoJogador -> EstadoJogador 
calcEstado x = x 


calcAtrito :: Piso -> Double
calcAtrito Terra = 0.25
calcAtrito Relva = 0.75
calcAtrito Boost = -0.25
calcAtrito Lama = 1.50
calcAtrito Cola = 3.00

movimentar :: Jogador -> Mapa -> Peca -> Peca -> Peca -> Jogada 
movimentar (Jogador p d v c e) m pfrente pesq pdir | calcAtrito (piso pfrente) <= calcAtrito (piso pesq) && calcAtrito (piso pfrente) <= calcAtrito (piso pdir) = Acelera
									     | t>p && calcAtrito (piso pdir) < calcAtrito (piso pfrente) && calcAtrito (piso pdir) <= calcAtrito (piso pesq) = Movimenta D
									     | p>0 && calcAtrito (piso pesq) < calcAtrito (piso pfrente) && calcAtrito (piso pesq) < calcAtrito (piso pdir) = Movimenta E
									     | t==p && calcAtrito (piso pfrente) > calcAtrito (piso pesq) = Movimenta E
									     | p==0 && calcAtrito (piso pfrente) > calcAtrito (piso pdir) = Movimenta D
									     	where 
									     		t = length m 

inclinar :: EstadoJogador -> Peca -> Jogada 
inclinar (Ar a i g) peca = if (i-(inclinacaoPecaAnterior peca)) >= 45 then Movimenta B else
								if (i-(inclinacaoPecaAnterior peca)) <= -45 then Movimenta C else Acelera


