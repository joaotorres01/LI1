-- | Este módulo define funções comuns da Tarefa 4 do trabalho prático.
module Tarefa4_2019li1g093 where

import LI11920
import Tarefa2_2019li1g093
import Tarefa1_2019li1g093
import Tarefa0_2019li1g093
-- * Testes
-- | Testes unitários da Tarefa 4.
--
-- Cada teste é um par (/tempo/,/'Mapa'/,/'Jogador'/).
testesT4 :: [(Double,Mapa,Jogador)]
testesT4 = []

-- * Funções principais da Tarefa 4.

-- | Avança o estado de um 'Jogador' um 'passo' em frente, durante um determinado período de tempo.
passo :: Double -- ^ O tempo decorrido.
     -> Mapa    -- ^ O mapa utilizado.
     -> Jogador -- ^ O estado anterior do 'Jogador'.
     -> Jogador -- ^ O estado do 'Jogador' após um 'passo'.
passo t m j = move t m (acelera t m j)

-- | Altera a velocidade de um 'Jogador', durante um determinado período de tempo.
acelera :: Double -- ^ O tempo decorrido.
     -> Mapa    -- ^ O mapa utilizado.
     -> Jogador -- ^ O estado anterior do 'Jogador'.
     -> Jogador -- ^ O estado do 'Jogador' após acelerar.
acelera t m (Jogador p d v c e) = (Jogador p d (v' (Jogador p d v c e) (piso peca) t) c e)
                              where
                                   peca = encontraPosicaoMatriz (p,dist) m
                                   dist = floor d


piso :: Peca -> Piso
piso (Recta x p) = x
piso (Rampa x h hf) = x


-- | Altera a posição de 'Jogador', durante um determinado período de tempo.
move :: Double -- ^ O tempo decorrido.
     -> Mapa    -- ^ O mapa utilizado.
     -> Jogador -- ^ O estado anterior do 'Jogador'.
     -> Jogador -- ^ O estado do 'Jogador' após se movimentar.
move t m (Jogador p d v c e) = 


v' :: Jogador -> Piso -> Double -> Double
v' (Jogador _ _ v _ e) piso t = (v + (fromIntegral(accelMota v e) - ((atrito piso e) * v)) * t)


accelMota :: Double -> EstadoJogador-> Int
accelMota v e = if (v < 2 && ifAcelera e) then 1 else 0   

atrito :: Piso -> EstadoJogador -> Double
atrito p e = if p==Terra && ifchao e then 0.25 else
				if p==Relva && ifchao e then 0.75 else
				if p==Boost && ifchao e  then -0.50 else
				if p==Lama && ifchao e then 1.50 else 
				if p==Cola && ifchao e then 3.00 else
				if ifAr e then 0.125 else 0

ifAcelera :: EstadoJogador -> Bool
ifAcelera (Chao True) = True
ifAcelera _ = False

tiraTimeout :: EstadoJogador -> Double -> EstadoJogador
tiraTimeout (Morto time) t = if (time-t)>=0 then Morto (time-t) else Chao False


inclinacaoAr :: Jogador -> Peca -> Jogador
inclinacaoAr (Jogador p d v c (Ar a i g)) pseg = if abs(i-inc)>=45 then (Jogador p d 0 c (Morto 1.0)) else (Jogador p d v c (Chao False))
                              where inc = inclinacaoPecaAnterior pseg


inclinacaoChao :: Jogador -> Peca -> Peca -> Jogador 
inclinacaoChao (Jogador p d v c (Chao b)) patual pseg = if incseg >= incatual then (Jogador p d v c (Chao b)) else (Jogador p d v c (Ar (altPeca d patual) (inclinacaoPecaAnterior patual) 0))
                              where 
                                   incatual = inclinacaoPecaAnterior patual
                                   incseg = inclinacaoPecaAnterior pseg



