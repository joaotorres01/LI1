-- | Este módulo define funções comuns da Tarefa 2 do trabalho prático.
module Tarefa2_2019li1g093 where

import LI11920
import Tarefa1_2019li1g093
import Tarefa0_2019li1g093
import Constroi

-- * Testes

-- | Testes unitários da Tarefa 2.
--
-- Cada teste é um triplo (/identificador do 'Jogador'/,/'Jogada' a efetuar/,/'Estado' anterior/).
{-testesT2 :: [(Int,Jogada,Estado)]
testesT2 = [(0, Acelera, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao False), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue acelerar enquanto está no Ar
(0, Acelera, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue acelerar enquanto está no Chao
(0, Descelera, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao False), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue desacelerar enquanto está no Ar
(0, Descelera, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue desacelerar enquanto está no Chao
(0, Dispara, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao False), Jogador 1 1 1 1 (Chao False)]), -- testa se o jogador consegue disparar enquanto está no Ar
(0, Dispara, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao False), Jogador 1 1 1 1 (Chao False)]),-- testa se o jogador consegue disparar enquanto está no Chao
(0, Dispara, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 0 (Chao True), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue disparar enquanto está no Chao, sem colas
(0, Dispara, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 0 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]), -- testa se o jogador consegue dispara enquanto está no Chao, na 1ª peça
(0, Movimenta D, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao False), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue inclinar a mota para a direita, enquanto está no ar
(0, Movimenta D, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue inclinar a mota para a direita, enquanto está no Chao
(0, Movimenta E, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao False), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue inclinar a mota para a esquerda, enquanto está no ar
(0, Movimenta E, Estado [[Recta Terra 0, Recta Relva 0],[Recta Terra 0, Recta Relva 0]] [Jogador 0 1 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue inclinar a mota para a esquerda, enquanto está no Chao
(0, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao na pista de cima
(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1 1 1 (Chao True)]), --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao noutra pista qualquer
(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1 1 1 (Chao False)]), --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao noutra pista qualquer
(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1.5 1 1 (Chao True)])]-} --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao e encontra uma diferença de alturas >0.2

{-testeT22 :: [(Int,Jogada,Estado)] 
testesT22 = [(1, Movimenta C, Estado [[Recta Terra 0, Recta Terra 0, Recta Terra 0],[Recta Terra 0,  Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1.5 1 1 (Chao True)]), --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao e encontra uma diferença de alturas <-0.2
(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 1, Rampa Relva 1 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.2 1 1 (Chao True), Jogador 1 1.2 1 1 (Chao True)]), --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no chao e encontra uma |diferença de alturas| = 0.2
(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1.5 1 1 (Chao False)]), --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no ar e encontra uma diferença de alturas >0.2
(1, Movimenta C, Estado [[Recta Terra 0, Recta Terra 0, Recta Terra 0],[Recta Terra 0,  Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1.5 1 1 (Chao False)]), --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no ar e encontra uma diferença de alturas <-0.2
(1, Movimenta C, Estado [[Recta Terra 0, Rampa Relva 0 1, Rampa Relva 1 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.2 1 1 (Chao True), Jogador 1 1.2 1 1 (Chao False)]), --testa se o jogador consegue movimentar a mota para a pista de cima, enquanto esta no ar e encontra uma |diferença de alturas| = 0.2
(1, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1 1 1 (Chao True)]), --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no chao na pista de baixo
(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1 1 1 (Chao True)]), --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no chao noutra pista qualquer
(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1.5 1 1 (Chao True)]), --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no chao e encontra uma diferença de alturas <0.2
(0, Movimenta B, Estado [[Recta Terra 0, Recta Terra 0, Recta Terra 0],[Recta Terra 0,  Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao True), Jogador 1 1.5 1 1 (Chao True)]), --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no chao e encontra uma diferença de alturas >-0.2
(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 1, Rampa Relva 1 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.2 1 1 (Chao True), Jogador 1 1.2 1 1 (Chao True)]), --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no chao e encontra uma |diferença de alturas| = 0.2
(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 2, Rampa Relva 2 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.5 1 1 (Chao False), Jogador 1 1.5 1 1 (Chao False)]), --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no ar e encontra uma diferença de alturas <0.2
(0, Movimenta B, Estado [[Recta Terra 0, Recta Terra 0, Recta Terra 0],[Recta Terra 0,  Rampa Relva 0 2, Rampa Relva 2 0]] [Jogador 0 1.5 1 1 (Chao False), Jogador 1 1.5 1 1 (Chao False)])] -}--testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no ar e encontra uma diferença de alturas >-0.2

testesT222 :: [(Int,Jogada,Estado)]
testesT222 = [(0, Movimenta B, Estado [[Recta Terra 0, Rampa Relva 0 1, Rampa Relva 1 0],[Recta Terra 0, Recta Terra 0, Recta Terra 0]] [Jogador 0 1.2 1 1 (Chao False), Jogador 1 1.2 1 1 (Chao False)])] --testa se o jogador consegue movimentar a mota para a pista de baixo, enquanto esta no ar e encontra uma |diferença de alturas| = 0.2
-- * Funções principais da Tarefa 2.

-- | Efetua uma jogada.
jogada :: Int -- ^ O identificador do 'Jogador' que efetua a jogada.
       -> Jogada -- ^ A 'Jogada' a efetuar.
       -> Estado -- ^ O 'Estado' anterior.
       -> Estado -- ^ O 'Estado' resultante após o jogador efetuar a jogada.
jogada indice (Movimenta dir) (Estado mapa je)  | dir == B = moveBaixo patual pseg (Estado mapa je) indice
                                                | dir == C = moveCima patual pseg (Estado mapa je) indice
                                                | dir == D = moveDir (Estado mapa je) indice
                                                | dir == E = moveEsq (Estado mapa je) indice
                                                where
                                    (Jogador a b c d e) = encontraIndiceLista indice je
                                    patual = encontraPosicaoMatriz (a,dist) mapa
                                    pseg = encontraPosicaoMatriz (a,(dist+1)) mapa
                                    dist = floor b

jogada indice (Acelera) (Estado mapa je) = (Estado mapa (atualizaIndiceLista indice (acelerar (encontraIndiceLista indice je)) je))
jogada indice (Desacelera) (Estado mapa je) = (Estado mapa (atualizaIndiceLista indice (desacelararrr (encontraIndiceLista indice je)) je))
jogada indice (Dispara) (Estado mapa je) = dispararcola (atualizaIndiceLista indice (encontraIndiceLista indice je) je) indice mapa 
                                where 
                                    (Jogador a b c d e) = encontraIndiceLista indice je
                                    player = (Jogador a b c d e)
                                    patual = encontraPosicaoMatriz (a,dist) mapa
                                    pseg = encontraPosicaoMatriz (a,(dist+1)) mapa
                                    jogadorCerto = acelerar(encontraIndiceLista indice je)
                                    dist = floor b
                                    

--1)

inclinacaoPecaAnterior:: Peca -> Double -- funcao que calcula a inclinacao de uma peca
inclinacaoPecaAnterior (Recta _ _) = 0
inclinacaoPecaAnterior (Rampa _ x y) = rad2graus (atan (fromIntegral (y-x)))


moveCima :: Peca -> Peca -> Estado -> Int -> Estado  
moveCima patual pseg (Estado mapa l) n = 
    if ifchao e && difAlt player num patual pseg <=0.2 && difAlt player num patual pseg >=(-0.2) then (Estado mapa (atualizaIndiceLista n (sobepista player) l)) else 
       if ifchao e && difAlt player num patual pseg >0.2 then Estado mapa (atualizaIndiceLista n morto l)  else
       if ifchao e && difAlt player num patual pseg <(-0.2) then (Estado mapa (atualizaIndiceLista n (sobepista ar) l)) else error "erro"
                where morto = (Jogador a b c d (Morto 1.0))
                      player = (Jogador a b c d e)
                      ar = (Jogador a b c d (Ar (altPeca (encontraIndiceLista n l) b patual) (inclinacaoPecaAnterior patual) 0))
                      (Jogador a b c d e) = encontraIndiceLista n l
                      num = fazNum (Jogador a b c d e)
                      

moveBaixo:: Peca -> Peca -> Estado -> Int -> Estado -- funcao que verifica se o jogador pode passar para a pista abaixo 
moveBaixo patual pseg (Estado mapa l) n = 
    if ifchao e && difAlt player num patual pseg <=0.2 && difAlt player num patual pseg >=(-0.2) then (Estado mapa (atualizaIndiceLista n (descepista player (Estado mapa l)) l)) else
       if ifchao e && difAlt player num patual pseg >0.2 then Estado mapa (atualizaIndiceLista n morto l) else
       if ifchao e && difAlt player num patual pseg <(-0.2) then  (Estado mapa (atualizaIndiceLista n (descepista ar (Estado mapa l)) l)) else error "erro"
            where 
                (Jogador a b c d e) = encontraIndiceLista n l
                morto = (Jogador a b c d (Morto 1.0))
                player = (Jogador a b c d e)
                ar = (Jogador a b c d (Ar (altPeca (encontraIndiceLista n l) b patual) (inclinacaoPecaAnterior patual) 0))
                num = fazNum (Jogador a b c d e)


sobepista:: Jogador -> Jogador -- dada a pista altual do jogador verifica se é possível passar para a pista acima 
sobepista (Jogador a b c d e)  = if a==0 then (Jogador a b c d e) else (Jogador (a-1) b c d e)

descepista:: Jogador -> Estado -> Jogador --dada a pista altual do jogador verifica se é possível passar para a pista anterior
descepista (Jogador a b c d e) (Estado h t) = if ((length h)-1)==a then (Jogador a b c d e) else (Jogador (a+1) b c d e)

--Altura
altPeca:: Jogador -> Double -> Peca -> Double -- dada uma peca e um double (diferença entre a distancia que o jogador percorreu e esse mesmo valor arrendondado as unidades) a funçao determina a altura num determinado ponto da peca
altPeca (Jogador a b c d e) num (Recta _ h) = fromIntegral h
altPeca (Jogador a b c d e) num (Rampa _ x y) =(((fromIntegral(y-x))*num)+fromIntegral(x))
                               where 
                                num = fazNum (Jogador a b c d e)

difAlt :: Jogador -> Double -> Peca -> Peca -> Double -- função que verifica a diferença entre a altura da peça para a qual o jogador pretende ir e a altura da peça em que ele se encontra
difAlt (Jogador a b c d e) num pi pf = ((altPeca (Jogador a b c d e) num pf)-(altPeca (Jogador a b c d e) num pi)) 
                    where num = fazNum (Jogador a b c d e)
                   
ifchao :: EstadoJogador -> Bool --funcao que verifica se o jogador se encontra no chao ou não 
ifchao (Chao _) = True 
ifchao _ = False 

ifAr:: EstadoJogador -> Bool -- Funcao que verifica se o jogador se encontra no ar ou nao
ifAr (Ar _ _ _) = True
ifAr _ = False

inclinacaoPlayer :: EstadoJogador -> Double
inclinacaoPlayer (Ar a b c) = b 

fazNum :: Jogador -> Double
fazNum (Jogador a b c d e) = b - fromIntegral(floor b)

auxAltura:: Jogador -> Peca -> Double
auxAltura (Jogador a b c d e) (Rampa p x y) = (fromIntegral(y-x)*(b-fromIntegral(floor b))+fromIntegral(x))
--acaba altura

moveDir:: Estado -> Int -> Estado
moveDir (Estado mapa l) n = 
                         if (ifAr (Ar p o i))==True && inclinacaoPlayer (Ar p o i) <=(-75) then Estado mapa (atualizaIndiceLista n ar l) else (Estado mapa l)
                            where 
                                ar = (Jogador a b c d (Ar p ((inclinacaoPlayer (Ar p o i)) -15) i))
                                (Jogador a b c d (Ar p o i))= encontraIndiceLista n l
                                estado = (Ar p o i)


moveEsq :: Estado -> Int -> Estado
moveEsq (Estado mapa l) n = if (ifAr (Ar p o i))==True && inclinacaoPlayer (Ar p o i) >=75 then Estado mapa (atualizaIndiceLista n ar l) else (Estado mapa l)
                            where
                                ar = (Jogador a b c d (Ar p ((inclinacaoPlayer (Ar p o i)) + 15) i))
                                (Jogador a b c d (Ar p o i))=encontraIndiceLista n l
                                 

acelerar :: Jogador -> Jogador
acelerar (Jogador a b c d e) = if (ifchao e)==True then (Jogador a b c d (Chao True)) else (Jogador a b c d e)

desacelararrr :: Jogador -> Jogador
desacelararrr (Jogador a b c d e) = if (ifchao e)==True then (Jogador a b c d (Chao False)) else (Jogador a b c d e)

dispararcola :: [Jogador] -> Int -> Mapa -> Estado
dispararcola ej n m = if ifmunicao (Jogador pistaAtual distancia vel cola estado)  && ifchao estado && ifVivo estado && ifpecaVal (Jogador pistaAtual distancia vel cola estado)  then Estado mapaAtualizado estadoAtual else Estado m ej
                    where
                        jcola@(Jogador pistaAtual distancia vel cola estado) = jcola {colaJogador = cola - 1}
                        mapaAtualizado = atualizaPosicaoMatriz (pistaAtual, distInteira) pecaCola m
                        pecaCola = meteCola (Jogador pistaAtual distancia vel cola estado) peca
                        distInteira = floor distancia
                        peca = encontraIndiceLista (distInteira-1) (encontraIndiceLista pistaAtual m)
                        estadoAtual = atualizaIndiceLista n jcola ej


meteCola :: Jogador -> Peca -> Peca
meteCola (Jogador a b c d e)  (Recta p h) = if ifmunicao (Jogador a b c d e)  && ifpecaVal (Jogador a b c d e)  then (Recta Cola h) else (Recta p h)
meteCola (Jogador a b c d e)  (Rampa p h1 hf) = if ifmunicao (Jogador a b c d e)  && ifpecaVal (Jogador a b c d e)  then (Rampa Cola h1 hf) else (Rampa p h1 hf)  

ifVivo :: EstadoJogador -> Bool 
ifVivo (Morto _) = False
ifVivo (Ar _ _ _) = False
ifVivo (Chao _) = True

ifmunicao:: Jogador -> Bool 
ifmunicao (Jogador a b c d e) = if d>=1 then True else False

ifpecaVal:: Jogador -> Bool
ifpecaVal (Jogador a b c d e) = if b>=1 then True else False