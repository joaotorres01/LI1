-- | Este módulo define funções comuns da Tarefa 3 do trabalho prático.
module Tarefa3_2019li1g093 where

import LI11920

-- * Testes

-- | Testes unitários da Tarefa 3.
--
-- Cada teste é um 'Mapa'.
testesT3 :: [Mapa]
testesT3 = [[[Recta Terra 0, Rampa Relva 0 2, Rampa Boost 2 0],[Recta Terra 0, Recta Lama 0, Recta Boost 0],[Recta Terra 0, Rampa Boost 0 1, Recta Lama 1]],[[Recta Terra 0, Recta Terra 0, Recta Terra 0],[Recta Terra 0, Rampa Lama 0 2, Rampa Boost 2 0], [Recta Terra 0, Rampa Lama 0 2, Rampa Boost 2 0]]]

-- * Funções principais da Tarefa 3.

-- | Desconstrói um 'Mapa' numa sequência de 'Instrucoes'.
--
-- __NB:__ Uma solução correcta deve retornar uma sequência de 'Instrucoes' tal que, para qualquer mapa válido 'm', executar as instruções '(desconstroi m)' produza o mesmo mapa 'm'.
--
-- __NB:__ Uma boa solução deve representar o 'Mapa' dado no mínimo número de 'Instrucoes', de acordo com a função 'tamanhoInstrucoes'.
desconstroi :: Mapa -> [Jogador] -> Instrucoes
desconstroi [] _ = []
desconstroi (h:t) ((Jogador a b c d e):x) = (construir h (Jogador a b c d e)) ++ ((desconstroi t x))


construir :: Pista -> Jogador -> Instrucoes
construir [] _ = []
construir ((Recta Terra 0):t) (Jogador a b c d e) = (construir t (Jogador a b c d e)) 
construir ((Recta p h):t) (Jogador a b c d e) = (Anda [a] p) : (construir t (Jogador a b c d e))
construir ((Rampa p hi hf):t) (Jogador a b c d e) = if difAlt (Rampa p hi hf) >= 0 then (Sobe [a] p (difAlt (Rampa p hi hf))) : (construir t (Jogador a b c d e)) else (Desce [a] p (abs(difAlt(Rampa p hi hf)))): (construir t (Jogador a b c d e))


difAlt :: Peca -> Int
difAlt (Rampa p hi hf) = hf - hi
difAlt (Recta p h) = 0
